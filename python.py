# ==========================================================
# === KHUNG CHAT V·ªöI GEMINI (b·ªï sung m·ªõi, gi·ªØ nguy√™n c√°c ph·∫ßn kh√°c)
# ==========================================================

st.divider()
st.header("üí¨ Chat v·ªõi Gemini AI")

# T·∫°o session l∆∞u h·ªôi tho·∫°i
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Hi·ªÉn th·ªã h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥
for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# √î nh·∫≠p c√¢u h·ªèi chat
user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ t√†i ch√≠nh, ph√¢n t√≠ch d·ªØ li·ªáu ho·∫∑c b·∫•t k·ª≥ n·ªôi dung n√†o...")

if user_input:
    # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(user_input)
    st.session_state.chat_history.append({"role": "user", "content": user_input})

    # G·ªçi API Gemini ƒë·ªÉ ph·∫£n h·ªìi
    api_key = st.secrets.get("GEMINI_API_KEY")
    if api_key:
        try:
            client = genai.Client(api_key=api_key)
            model_name = "gemini-2.5-flash"

            # G·ª≠i n·ªôi dung ng∆∞·ªùi d√πng
            with st.chat_message("assistant"):
                with st.spinner("Gemini ƒëang ph·∫£n h·ªìi..."):
                    response = client.models.generate_content(
                        model=model_name,
                        contents=f"Ng∆∞·ªùi d√πng h·ªèi: {user_input}"
                    )
                    bot_reply = response.text
                    st.markdown(bot_reply)

            # L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i
            st.session_state.chat_history.append({"role": "assistant", "content": bot_reply})

        except Exception as e:
            st.error(f"L·ªói khi k·∫øt n·ªëi Gemini: {e}")
    else:
        st.error("Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong Secrets. Vui l√≤ng c·∫•u h√¨nh tr∆∞·ªõc khi s·ª≠ d·ª•ng.")
